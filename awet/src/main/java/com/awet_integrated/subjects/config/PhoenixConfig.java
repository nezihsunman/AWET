package com.awet_integrated.subjects.config;

import com.awet_integrated.AWET.ClickList;
import com.awet_integrated.AWET.ClickListService;
import com.awet_integrated.AWET.ID;
import com.awet_integrated.AWET.IDService;
import com.awet_integrated.subjects.ApplicationNames;
import com.awet_integrated.subjects.Config;
import com.awet_integrated.suitegenerator.SuiteGeneratorConfig;
import com.awet_integrated.tedd.extraction.DependencyGraphExtractionConfig;
import com.awet_integrated.utils.Properties;
import com.crawljax.core.configuration.CrawlRules;
import com.crawljax.core.configuration.CrawljaxConfiguration;
import com.crawljax.core.configuration.Form;
import com.crawljax.core.configuration.InputSpecification;
import com.crawljax.core.state.Identification;
import com.crawljax.forms.FormInput;
import com.crawljax.forms.InputValue;
import com.crawljax.stateabstractions.visual.imagehashes.PerceptualImageHashStateVertexFactory;

import java.util.*;

/**
 * The application phoenix is NON DETERMINISTIC. In particular the order in which the boards are listed in the menu
 * is random. This will break the test suite generated by the crawler unless the application behaviour is changed. For
 * now I changed the generated test suite in order to cope with non determinism.
 */
public class PhoenixConfig extends Config {

    private static final String url = "http://localhost:4000";
    private static final int waitTimeAfterReload = 1000;

    private static final IDService idService = new IDService();
    private static final ClickListService clickListService = new ClickListService();





    public PhoenixConfig() {
        super(ApplicationNames.Name.PHOENIX.getName());
    }

    @Override
    public CrawljaxConfiguration.CrawljaxConfigurationBuilder getCrawljaxConfig() {

        CrawljaxConfiguration.CrawljaxConfigurationBuilder builder = this.crawljaxCommonConfig(url,
                Properties.MAX_RUNTIME, 1500, waitTimeAfterReload);

//        builder.setConsiderCandidateElementsOnce(CrawljaxConfiguration.CandidateElementsMode.checked);
        builder.setConsiderCandidateElementsOnce(CrawljaxConfiguration.CandidateElementsMode.fired);

        builder.setStateVertexFactory(new PerceptualImageHashStateVertexFactory());

        builder.crawlRules().setCrawlPriorityMode(CrawlRules.CrawlPriorityMode.NORMAL);

        builder.crawlRules().click("a", "button", "div");

        InputSpecification inputSpecification = new InputSpecification();


        builder.crawlRules().click("BUTTON");
        builder.crawlRules().click("A");

        String applicationName = Properties.APPLICATION_NAME;
        // click only first transaction item
        //builder.crawlRules().click("div").underXPath("(/html[1]/body[1]/div[1]/div[2]/div[3]/div[1]/div[1]/div[2]/div[1]/div[2]/div[1]/div[1])[1]");

        /*// trello website
        builder.crawlRules().dontClick("a")
                .withAttribute("href", "https://trello.com");
        // diacode website
        builder.crawlRules().dontClick("a")
                .withAttribute("href", "https://diacode.com");
        // twitter handle
        builder.crawlRules().dontClick("a")
                .withAttribute("href", "https://twitter.com/bigardone");
*/

        Map<String, Collection<List<ID>>> uniqueList = idService.getIdWithHaspMap(1, ApplicationNames.Name.PHOENIX.getName());

        for (Map.Entry<String, Collection<List<ID>>> entry : uniqueList.entrySet()) {
            Form contactForm = new Form();
            String xpath = entry.getKey();
            String beforeClickType = "";
            String infoBeforeClickType = "";
            String tagName = "";

            for (List<ID> idList : entry.getValue()) {

                String getKeyofValueForIdentificationXpath = "";
                String getKeyofValueForIdentificationId = "";
                List<String> getKeyofValueForIdentificationXPATH = new ArrayList<>();
                List<String> getValueListId = new ArrayList<String>();

                for (ID id : idList) {
                    if (id.getBeforeClickType().equals("withText")) {
                        beforeClickType = "withText";
                        infoBeforeClickType = id.getInfoBeforeClickType();
                    } else if (id.getBeforeClickType().equals("underxpath")) {
                        beforeClickType = "underxpath";
                    }
                    if (id.getHow().equals("By.id")) {
                        getKeyofValueForIdentificationId = id.getKeyOfValue();
                        getValueListId.add(id.getValue());
                    } else if (id.getHow().equals("By.xpath")) {
                        getKeyofValueForIdentificationXpath = id.getKeyOfValue();
                        getKeyofValueForIdentificationXPATH.add(id.getValue());
                    }
                }

                if (getValueListId.size() > 0) {
                    String[] listArray = new String[getValueListId.size()];
                    Set<InputValue> inputValueList = new HashSet<>();
                    for (int i = 0; i < getValueListId.size(); i++) {
                        listArray[i] = getValueListId.get(i);
                        inputValueList.add(new InputValue(getValueListId.get(i)));
                    }
                    contactForm.inputField(FormInput.InputType.INPUT, new Identification(Identification.How.id, getKeyofValueForIdentificationId)).inputValues(listArray);
                }
                if (getKeyofValueForIdentificationXPATH.size() > 0) {
                    String[] listArray = new String[getKeyofValueForIdentificationXPATH.size()];
                    Set<InputValue> inputValueList = new HashSet<>();
                    for (int i = 0; i < getKeyofValueForIdentificationXPATH.size(); i++) {
                        listArray[i] = getKeyofValueForIdentificationXPATH.get(i);
                        inputValueList.add(new InputValue(getKeyofValueForIdentificationXPATH.get(i)));
                    }
                    contactForm.inputField(FormInput.InputType.INPUT, new Identification(Identification.How.xpath, getKeyofValueForIdentificationXpath)).inputValues(listArray);
                }

            }
            if (!xpath.equals("") && beforeClickType.equals("withText")) {
                inputSpecification.setValuesInForm(contactForm).beforeClickElement("button").withText(infoBeforeClickType);
            } else if (!xpath.equals("") && beforeClickType.equals("underxpath")) {
                inputSpecification.setValuesInForm(contactForm).beforeClickElement("button").underXPath(xpath);
            }

        }

        List<ClickList> listOfClick = clickListService.getNameWithGroup(1, ApplicationNames.Name.PHOENIX.getName());
        for (ClickList click : listOfClick) {
            if (click.getHow_xpath_id().equals("By.xpath")) {
                builder.crawlRules().click(click.getTagname()).underXPath(click.getClickxpath());
            } else if (click.getHow_xpath_id().equals("By.id")) {
                builder.crawlRules().click("button").withText(click.getClickxpath());
                //builder.crawlRules().click("a").withText(click.getClickxpath());
            } else if (click.getHow_xpath_id().equals("By.tagname")) {
                builder.crawlRules().click(click.getTagname()).underXPath(click.getClickxpath());
            } else if (click.getHow_xpath_id().equals("withText")) {
                builder.crawlRules().click(click.getTagname()).withText(click.getInfoBeforeClickType());
            }

        }
        Form listForm = new Form();
        FormInput listNameInput = listForm.inputField(FormInput.InputType.TEXT,
                new Identification(Identification.How.id, "list_name"));
        listNameInput.inputValues("list", "new list", "just a list", "list name", "standard tuning");
        inputSpecification.setValuesInForm(listForm)
                .beforeClickElement("button").withText("Save list");

        builder.crawlRules().setInputSpec(inputSpecification);

        //builder.crawlRules().setDisableIdAndNameIdentification(true);

        builder.setHandleSameFormInputsOncePerState(true);


        return builder;

    }

    @Override
    public SuiteGeneratorConfig getSuiteGeneratorConfig() {

        SuiteGeneratorConfig suiteGeneratorConfig = this.testSuiteGeneratorCommonConfig(url, waitTimeAfterReload);
        suiteGeneratorConfig.setScriptNameToInclude("application");
        suiteGeneratorConfig.setSourcemapURL("http://localhost:4000/js/application.js.map");
        suiteGeneratorConfig.setSrcCodeFolder("web/static/js");
        suiteGeneratorConfig.setFiredElementStrategy(false);

        return suiteGeneratorConfig;
    }

    @Override
    public DependencyGraphExtractionConfig getDependencyGraphExtractionConfig() {
        String dependencyGraphOptimized

        DependencyGraphExtractionConfig dependencyGraphExtractionConfig = new DependencyGraphExtractionConfig();
        dependencyGraphExtractionConfig.setParetoFrontSolution(dependencyGraphOptimized);
        // window strategy
//        dependencyGraphExtractionConfig.setFixedMinimizedTestSuite("11101000101100100000100110000000000011000000000011000");
        // one by one strategy
        dependencyGraphExtractionConfig.setFixedSelectedTestSuite("11111111111111100000100110000000000011000000000011000");


        return dependencyGraphExtractionConfig;
    }
}
