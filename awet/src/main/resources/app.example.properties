#--------------------------------------
# comparison
#--------------------------------------

# Name of the technique you want to run tests of. See Techniques class for values.
technique=

# String representing the execution of a test suite. If byte = 1 the corresponding test, in order, must be executed for measuring coverage since it did not fail.
suite_execution_result_byte_string=

#--------------------------------------
# default
#--------------------------------------

# Name of the web application under test.
application_name=app

#--------------------------------------
# tedd-refine
#--------------------------------------

# If enabled the dependency graph in 'graph_path' is the ground truth, therefore all the dependencies in that graph must be either manifest or uninteresting.
ground_truth_check=false

# Dependency graph path. File must exist if 'refine' property value is true.
graph_path=

#--------------------------------------
# tedd-runtime
#--------------------------------------

# Name of the method of the reset class in project with test suite. The method is going to be called at runtime.
reset_method_name=reset

# Classpath of project with test suite.
project_classpath=

# Qualified name of reset class in project with test suite. The algorithm needs to reset the application state and the project with test suite must implement a reset method.
reset_class_name=utils.ResetAppState

# Stop test suite / schedule execution after first failure.
stop_execution_first_failure=false

#--------------------------------------
# tedd-algorithm
#--------------------------------------

# Absolute path of dependency graph dot files in file system.
dependency_graph_path=/home/Desktop

# Strategy used to select edges in the dependency graph. See RefinementStrategies class for values.
refinement_strategy=source_first

# If true the dependency graph is validated incrementally starting from the bottom (tests placed first in the test suite).
incremental_refinement=false

#--------------------------------------
# tedd-default
#--------------------------------------

# Absolute path of test suite in file system.
test_suite_path=/home/Desktop/app/TestSuite.java

# If true all intermediate dependency graphs are printed during the refinement.
print_intermediate_graphs=true

#--------------------------------------
# crawling
#--------------------------------------

# Enable fired element strategy that considers an element as clickable in a state if it has not been fired. Default is checked or seen.
fired_element_strategy=false

# Enable CHROME headless
headless=false

# Max runtime of crawling in min.
max_runtime=30

# If true the crawler will ask the user to fill forms with values during crawling. If false the filling strategy will be random.
form_training=true

# Wait time after event.
wait_time_after_event=150

# URL of the application to be crawled.
url=http://localhost

# Separator used for separating crawl paths during crawling.
crawl_path_separator=-----

# Wait time after reload.
wait_time_after_reload=50

#--------------------------------------
# suite_generator
#--------------------------------------

# Path of file where driver actions were written during crawling of a certain application.
driver_actions_file_path=/home/Desktop/app/driver-actions.txt

# Path of the directory where the test suite project is going to be placed.
test_suite_project_dir_path=/home/Destkop/app

# Colon separated list of script names to EXCLUDE during js code coverage analysis.
# Minified libraries are excluded by default.
script_names_to_exclude=jquery.js:angular.js

# Script name to INCLUDE during js code coverage analysis. Needed when the application under test uses a framework
# where every source file is put in a single file. When this property is not empty the previous one is not considered.
script_name_to_include=bundle-12347.js

# Colon separated list of line ranges to consider while analyzing js coverage for the script script_name_to_include.
# In fact when a framework is used to develop the application under test in the single file there are also libraries
# that the user may not be interested to cover. If this property is empty when property script_name_to_include is not
# empty then all lines are considered in the file specified in the script_name_to_include property.
line_ranges=1,942:2054,7803

#--------------------------------------
# filtering
#--------------------------------------

# Byte string solution given by the coverage driven test selection.
coverage_driven_test_selection_byte_string=10101

# Byte string representing the filtered dependency graph given by the bi-objective filter.
biobjective_dependency_graph_byte_string=0 01 111 0000

#--------------------------------------
# tedd-extraction
#--------------------------------------

# Strategy used to extract the dependency graph. See ExtractionStrategies class for values.
extraction_strategy=original_order

# Computation of indirect dependencies during dependency graph multi-objective optimization. It applies if extraction_strategy=moea.
consider_indirect_dependencies=false

# Write operations mapped to selenium actions separated by ':'. It applies if extraction_strategy = 'sub_use'.
write_actions=sendKeys

#--------------------------------------
# tedd-validation-check
#--------------------------------------

# Absolute path of the final graph to be checked.
final_graph_path=/home/Desktop/app/final-graph.txt

#--------------------------------------
# suite-minimization
#--------------------------------------

# Absolute path of the validated graph to be imported for suite minimization.
validated_graph_path=/home/Desktop/app/validated-graph.txt

# Absolute path of the coverage reports directory to be analyzed.
coverage_reports_directory_path=/home/Desktop/app/coverage-reports

# String representing the solution given by the solver as byte string. If byte = 1 the corresponding test, in order, must be in the minimized suite.
solution_byte_string=010101