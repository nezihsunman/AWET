#--------------------------------------
# tedd-validation-check
#--------------------------------------

# Absolute path of the final graph to be checked.
final_graph_path=/home/Desktop/app/final-graph.txt

#--------------------------------------
# default
#--------------------------------------

# Name of the web application under test. See ApplicationNames class for values.
application_name=dimeshift

#--------------------------------------
# tedd-refine
#--------------------------------------

# If enabled the dependency graph in 'graph_path' is the ground truth, therefore all the dependencies in that graph must be either manifest or uninteresting.
ground_truth_check=false

# Dependency graph path. File must exist if 'refine' property value is true.
graph_path=

#--------------------------------------
# comparison
#--------------------------------------

# String representing the execution of a test suite. If byte = 1 the corresponding test, in order, must be executed for measuring coverage since it did not fail.
suite_execution_result_byte_string=10

# Name of the technique you want to run tests of. See Techniques class for values.
technique=crawljax

#--------------------------------------
# suite-generator
#--------------------------------------

# Value of k in k-shortest-path algorithm to generate ATUSA tests.
k_shortest_path=14

# Script name to INCLUDE during js code coverage analysis. Needed when the application under test uses a framework where every source file is put in a single file. When this property is not empty the previous one is not considered.
script_name_to_include=bundle-12347.js

# Path of file where driver actions were written during crawling of a certain application.
driver_actions_file_path=/home/Desktop/app/driver-actions.txt

# Path of the directory where the test suite project is going to be placed.
test_suite_project_dir_path=/home/Destkop/app

# Comma separated list of script names to EXCLUDE during js code coverage analysis. Minified libraries are excluded by default.
script_names_to_exclude=jquery.js:angular.js

# Colon separated list of line ranges to consider while analyzing js coverage for the script script_name_to_include. In fact when a framework is used to develop the application under test in the single file there are also libraries that the user may not be interested to cover. If this property is empty when property script_name_to_include is not empty then all lines are considered in the file specified in the script_name_to_include property.
line_ranges=1,942:2054,7803

#--------------------------------------
# tedd-runtime
#--------------------------------------

# Name of the method of the reset class in project with test suite. The method is going to be called at runtime.
reset_method_name=reset

# Classpath of project with test suite.
project_classpath=/home/nezihsunman/.m2/repository/junit/junit/4.12/junit-4.12.jar:/home/nezihsunman/.m2/repository/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-java/3.141.59/selenium-java-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-api/3.141.59/selenium-api-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-chrome-driver/3.141.59/selenium-chrome-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-edge-driver/3.141.59/selenium-edge-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-firefox-driver/3.141.59/selenium-firefox-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-ie-driver/3.141.59/selenium-ie-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-opera-driver/3.141.59/selenium-opera-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-remote-driver/3.141.59/selenium-remote-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-safari-driver/3.141.59/selenium-safari-driver-3.141.59.jar:/home/nezihsunman/.m2/repository/net/bytebuddy/byte-buddy/1.8.15/byte-buddy-1.8.15.jar:/home/nezihsunman/.m2/repository/org/apache/commons/commons-exec/1.3/commons-exec-1.3.jar:/home/nezihsunman/.m2/repository/com/google/guava/guava/25.0-jre/guava-25.0-jre.jar:/home/nezihsunman/.m2/repository/com/google/code/findbugs/jsr305/1.3.9/jsr305-1.3.9.jar:/home/nezihsunman/.m2/repository/org/checkerframework/checker-compat-qual/2.0.0/checker-compat-qual-2.0.0.jar:/home/nezihsunman/.m2/repository/com/google/errorprone/error_prone_annotations/2.1.3/error_prone_annotations-2.1.3.jar:/home/nezihsunman/.m2/repository/com/google/j2objc/j2objc-annotations/1.1/j2objc-annotations-1.1.jar:/home/nezihsunman/.m2/repository/org/codehaus/mojo/animal-sniffer-annotations/1.14/animal-sniffer-annotations-1.14.jar:/home/nezihsunman/.m2/repository/com/squareup/okhttp3/okhttp/3.11.0/okhttp-3.11.0.jar:/home/nezihsunman/.m2/repository/com/squareup/okio/okio/1.14.0/okio-1.14.0.jar:/home/nezihsunman/.m2/repository/org/seleniumhq/selenium/selenium-support/3.4.0/selenium-support-3.4.0.jar:/home/nezihsunman/.m2/repository/cglib/cglib-nodep/3.2.4/cglib-nodep-3.2.4.jar:/home/nezihsunman/.m2/repository/commons-codec/commons-codec/1.10/commons-codec-1.10.jar:/home/nezihsunman/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar:/home/nezihsunman/.m2/repository/org/apache/httpcomponents/httpclient/4.5.3/httpclient-4.5.3.jar:/home/nezihsunman/.m2/repository/org/apache/httpcomponents/httpcore/4.4.6/httpcore-4.4.6.jar:/home/nezihsunman/.m2/repository/net/java/dev/jna/jna/4.1.0/jna-4.1.0.jar:/home/nezihsunman/.m2/repository/net/java/dev/jna/jna-platform/4.1.0/jna-platform-4.1.0.jar:/home/nezihsunman/.m2/repository/io/github/bonigarcia/webdrivermanager/3.3.0/webdrivermanager-3.3.0.jar:/home/nezihsunman/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:/home/nezihsunman/.m2/repository/commons-io/commons-io/2.6/commons-io-2.6.jar:/home/nezihsunman/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:/home/nezihsunman/.m2/repository/org/rauschig/jarchivelib/1.0.0/jarchivelib-1.0.0.jar:/home/nezihsunman/.m2/repository/org/apache/commons/commons-compress/1.18/commons-compress-1.18.jar:/home/nezihsunman/.m2/repository/org/jsoup/jsoup/1.11.3/jsoup-1.11.3.jar:/home/nezihsunman/.m2/repository/io/webfolder/cdp4j/3.0.8/cdp4j-3.0.8.jar:/home/nezihsunman/.m2/repository/com/google/code/gson/gson/2.8.5/gson-2.8.5.jar:/home/nezihsunman/.m2/repository/com/atlassian/sourcemap/sourcemap/1.7.7/sourcemap-1.7.7.jar:/home/nezihsunman/.m2/repository/mysql/mysql-connector-java/6.0.5/mysql-connector-java-6.0.5.jar

# Stop test suite / schedule execution after first failure.
stop_execution_first_failure=false

# Qualified name of reset class in project with test suite. The algorithm needs to reset the application state and the project with test suite must implement a reset method.
reset_class_name=utils.ResetAppState

#--------------------------------------
# tedd-algorithm
#--------------------------------------

# Absolute path of dependency graph dot files in file system.
dependency_graph_path=/home/nezihsunman/workspace/AWET/awet/applications/petclinic/testsuite-petclinic/src/main/resources

# If true the dependency graph is validated incrementally starting from the bottom (tests placed first in the test suite).
incremental_refinement=false

# Strategy used to select edges in the dependency graph. See RefinementStrategies class for values.
refinement_strategy=source_first

#--------------------------------------
# tedd-default
#--------------------------------------

# Absolute path of test suite in file system.
test_suite_path=/home/nezihsunman/workspace/AWET/awet/applications/dimeshift/testsuite-dimeshift/src/main/java/tests/GeneratedTestSuiteFired.java

# If true all intermediate dependency graphs are printed during the refinement.
print_intermediate_graphs=true

#--------------------------------------
# crawling
#--------------------------------------

# Enable CHROME headless.
headless=false

# Wait time after event.
wait_time_after_event=150

# URL of the application to be crawled.
url=http://localhost

# Separator used for separating crawl paths during crawling.
crawl_path_separator=-----

# Wait time after reload.
wait_time_after_reload=50

# If true the crawler will ask the user to fill forms with values during crawling. If false the filling strategy will be random.
form_training=false

# Enable fired element strategy that considers an element as clickable in a state if it has not been fired. Default is checked or seen.
fired_element_strategy=true

# Max runtime of crawling in min.
max_runtime=25

#--------------------------------------
# tedd-extraction
#--------------------------------------

# Write operations mapped to selenium actions separated by ':'. It applies if extraction_strategy = 'sub_use'.
write_actions=sendKeys

# Computation of indirect dependencies during dependency graph multi-objective optimization. It applies if extraction_strategy=moea.
consider_indirect_dependencies=true

# Strategy used to extract the dependency graph. See ExtractionStrategies class for values.
extraction_strategy=biobjective

#--------------------------------------
# suite-minimization
#--------------------------------------

# String representing the solution given by the solver as byte string. If byte = 1 the corresponding test, in order, must be in the minimized suite.
solution_byte_string=100000000000010000

# Absolute path of the coverage reports directory to be analyzed.
coverage_reports_directory_path=/home/nezihsunman/workspace/AWET/awet/applications/dimeshift/testsuite-dimeshift/all-coverage-reports

# Absolute path of the validated graph to be imported for suite minimization.
validated_graph_path=/home/nezihsunman/Desktop/ecommerce-validation-biobjective/dependency-graph-biobjective-final-recover-missed-ecommerce.txt

#--------------------------------------
# filtering
#--------------------------------------

# Byte string solution given by the coverage driven test selection.
coverage_driven_test_selection_byte_string=100111001001100000

# Byte string representing the filtered dependency graph given by the bi-objective filter.
biobjective_dependency_graph_byte_string=0 00 000 0000 00000 000000 0000000 00000000 001000001 0000010010 00000000000 001000010000 0000000000000 00000000000000 000000000000000 0000100000000001 10001000000000000

